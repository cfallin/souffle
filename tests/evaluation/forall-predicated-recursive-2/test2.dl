.decl Node(x:number)

.decl Int(x:number)

Node(x) :- Int(x), x >= 16.
Node(x) ?- Int(x), Node(2*x), Node(2*x + 1).


Int(0).
Int(1).
Int(2).
Int(3).
Int(4).
Int(5).
Int(6).
Int(7).
Int(8).
Int(9).
Int(10).
Int(11).
Int(12).
Int(13).
Int(14).
Int(15).
Int(16).
Int(17).
Int(18).
Int(19).
Int(20).
Int(21).
Int(22).
Int(23).
Int(24).
Int(25).
Int(26).
Int(27).
Int(28).
Int(29).
Int(30).
Int(31).

.output Node

.decl NodeReal(x:number)
NodeReal(x) :- +Node(x).

.output NodeReal

.decl NotNode(x:number)
NotNode(x) :- Int(x), !Node(x).

.decl NodeOrNotNode(x:number)
NodeOrNotNode(x) :- Int(x), (Node(x); !Node(x)).

.output NotNode
.output NodeOrNotNode

.decl NotNodeReal(x:number)
NotNodeReal(x) :- +NotNode(x).

.output NotNodeReal

.decl AnyNode(x:number)
AnyNode(x) :- Int(x), Node(x_), x_ < 16.

.decl AnyNodeReal(x:number)
AnyNodeReal(x) :- Int(x), x < 16, +Node(_).

.decl AnyNodeReal2(x:number)
AnyNodeReal2(x) :- +Node(_), Int(x), x < 16.

.output AnyNode
.output AnyNodeReal
.output AnyNodeReal2
